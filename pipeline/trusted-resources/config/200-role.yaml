# Copyright 2022 The Tekton Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-trusted-resources-webhook
  namespace: tekton-trusted-resources
  labels:
    app.kubernetes.io/component: tekton-trusted-resources
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: admissioncontrol
rules:
  # Webhook needs to list and watch configmaps for reconciliation.
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["list", "watch"]
  # The webhook needs access to these configmaps for logging information.
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get"]
    resourceNames: ["config-logging", "config-observability", "config-leader-election", "config-trusted-resources"]
  # The webhook daemon makes a reconciliation loop on webhook-certs. Whenever
  # the secret changes it updates the webhook configurations with the certificates
  # stored in the secret.
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["list", "watch"]
  # The webhook needs access to these secrets for certs and verificaiton
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "update"]
    resourceNames: ["trusted-resources-webhook-certs", "signing-secret"]
  # The webhook needs access to it's SA to make fetch resources
  - apiGroups: [""]
    resources: ["serviceaccounts"]
    verbs: ["get"]
    resourceNames: ["tekton-trusted-resources-webhook"]
  # The webhook needs access to it's ns to fetch resources in this ns
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get"]
    resourceNames: ["tekton-trusted-resources"]
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-trusted-resources-leader-election
  namespace: tekton-trusted-resources
  labels:
    app.kubernetes.io/instance: default
    app.kubernetes.io/part-of: admissioncontrol
rules:
  # We uses leases for leaderelection
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "list", "create", "update", "delete", "patch", "watch"]
